import { AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class NgxTypedJsComponent implements AfterViewInit, OnChanges {
    cursorColor?: string;
    strings: string[];
    stringsElement?: string;
    typeSpeed: number;
    startDelay?: number;
    backSpeed?: number;
    smartBackspace?: boolean;
    shuffle?: boolean;
    backDelay?: number;
    fadeOut?: boolean;
    fadeOutClass?: string;
    fadeOutDelay?: number;
    loop?: boolean;
    loopCount?: number;
    showCursor?: boolean;
    cursorChar?: string;
    autoInsertCss?: boolean;
    attr?: string;
    bindInputFocusEvents?: boolean;
    contentType?: string;
    private completed;
    private preStringTyped;
    private stringTyped;
    private lastStringBackspaced;
    private typingPaused;
    private typingResumed;
    private reset;
    private stopped;
    private started;
    private destroyed;
    private typed;
    private content;
    ngAfterViewInit(): void;
    toggle(): void;
    stop(): void;
    start(): void;
    destroy(): void;
    doReset(restart?: boolean): void;
    private get options();
    private updateCursorStyle;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxTypedJsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxTypedJsComponent, "ngx-typed-js", never, { "cursorColor": "cursorColor"; "strings": "strings"; "stringsElement": "stringsElement"; "typeSpeed": "typeSpeed"; "startDelay": "startDelay"; "backSpeed": "backSpeed"; "smartBackspace": "smartBackspace"; "shuffle": "shuffle"; "backDelay": "backDelay"; "fadeOut": "fadeOut"; "fadeOutClass": "fadeOutClass"; "fadeOutDelay": "fadeOutDelay"; "loop": "loop"; "loopCount": "loopCount"; "showCursor": "showCursor"; "cursorChar": "cursorChar"; "autoInsertCss": "autoInsertCss"; "attr": "attr"; "bindInputFocusEvents": "bindInputFocusEvents"; "contentType": "contentType"; }, { "completed": "completed"; "preStringTyped": "preStringTyped"; "stringTyped": "stringTyped"; "lastStringBackspaced": "lastStringBackspaced"; "typingPaused": "typingPaused"; "typingResumed": "typingResumed"; "reset": "reset"; "stopped": "stopped"; "started": "started"; "destroyed": "destroyed"; }, never, ["*"]>;
}
